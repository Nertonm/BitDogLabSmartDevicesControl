// Função para enviar uma requisição HTTP POST
void send_http_post(const char *url, const char *body) {
    struct addrinfo hints, *res;
    int sockfd;
    char send_buffer[1024];
    char recv_buffer[1024];

    // Configura os hints para obter o endereço do servidor
    memset(&hints, 0, sizeof(hints));
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;

    // Obtém o endereço do servidor
    if (getaddrinfo(url, "80", &hints, &res) != 0) {
        printf("Erro ao resolver o endereço do servidor\n");
        return;
    }

    // Cria o socket
    sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
    if (sockfd < 0) {
        printf("Erro ao criar o socket\n");
        freeaddrinfo(res);
        return;
    }

    // Conecta ao servidor
    if (connect(sockfd, res->ai_addr, res->ai_addrlen) < 0) {
        printf("Erro ao conectar ao servidor\n");
        close(sockfd);
        freeaddrinfo(res);
        return;
    }

    // Prepara a requisição HTTP POST
    snprintf(send_buffer, sizeof(send_buffer),
             "POST / HTTP/1.1\r\n"
             "Host: %s\r\n"
             "Content-Type: application/json\r\n"
             "Content-Length: %d\r\n"
             "\r\n"
             "%s",
             url, strlen(body), body);

    // Envia a requisição
    if (send(sockfd, send_buffer, strlen(send_buffer), 0) < 0) {
        printf("Erro ao enviar a requisição\n");
        close(sockfd);
        freeaddrinfo(res);
        return;
    }

    // Recebe a resposta
    int len = recv(sockfd, recv_buffer, sizeof(recv_buffer) - 1, 0);
    if (len > 0) {
        recv_buffer[len] = '\0';
        printf("Resposta do servidor:\n%s\n", recv_buffer);
    }

    // Fecha o socket e libera a memória
    close(sockfd);
    freeaddrinfo(res);
}